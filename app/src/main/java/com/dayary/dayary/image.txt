private static final int REQUEST_CODE = 0;
    private ImageView imageView;
    private Button upload;
    private Button save;
    private String imgURL;
    private TextView mView;
    private EditText editText;
    private String string;
    private FirebaseAuth mAuth;
    private FirebaseStorage mStorage = null;
    private FirebaseDatabase mDatabase = null;
    private String uid;
    private Uri selectedImageUri;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_dbtest);
        mView = (TextView) findViewById(R.id.textView);
        imageView = findViewById(R.id.imageView1);
        upload = findViewById(R.id.upload);
        upload.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View view) {
                Intent intent = new Intent();
                intent.setType("image/*");
                intent.setAction(Intent.ACTION_GET_CONTENT);
                startActivityForResult(intent, REQUEST_CODE);
            }
        });
        editText = findViewById(R.id.edit1);

        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
        System.out.println(user.getUid());
        System.out.println(user.getEmail());
        uid = user.getUid();
        save = findViewById(R.id.save);
        save.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                uid = user.getUid();
                Uri file = Uri.fromFile(new File(String.valueOf(selectedImageUri)));
                Log.d("Photo", "Photo file : " + file);
                StorageReference storageReference = mStorage.getReference().child("userImages").child("uid/" + file.getLastPathSegment());
                storageReference.putFile(Uri.parse(imgURL)).addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {
                    @Override
                    public void onComplete(@NonNull Task<UploadTask.TaskSnapshot> task) {
                        final Task<Uri> imageUrl = task.getResult().getStorage().getDownloadUrl();
                        while (!imageUrl.isComplete()) ;
                        mDatabase.getReference().child("users").child(uid)
                                .addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        PostModel postModel = new PostModel();
                                        postModel.myId = uid;
                                        postModel.photo = imageUrl.getResult().toString();
                                        postModel.photoName = file.getLastPathSegment();
                                        postModel.text = editText.getText().toString();
                                        mDatabase.getReference().child("contents").child("contents").push().setValue(postModel).addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {
                                                Log.d("photo", "Photo file : " + file);
                                            }
                                        });
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.d("Photo", "Photo file : " + file + " Error");
                                    }
                                });

                    }
                });
            }
        });
    }


    public String getPath(Uri uri) {

        String[] proj = {MediaStore.Images.Media.DATA};
        CursorLoader cursorLoader = new CursorLoader(this, uri, proj, null, null, null);
        Cursor cursor = cursorLoader.loadInBackground();
        int index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        cursor.moveToFirst();
        return cursor.getString(index);
    }

    private void showExif(ExifInterface exif) {
        String myAttribute = "[Exif information] \n\n";
        myAttribute += getTagString(ExifInterface.TAG_DATETIME, exif);
        myAttribute += getTagString(ExifInterface.TAG_FLASH, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LATITUDE, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LATITUDE_REF, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LONGITUDE, exif);
        myAttribute += getTagString(ExifInterface.TAG_GPS_LONGITUDE_REF, exif);
        myAttribute += getTagString(ExifInterface.TAG_IMAGE_LENGTH, exif);
        myAttribute += getTagString(ExifInterface.TAG_IMAGE_WIDTH, exif);
        myAttribute += getTagString(ExifInterface.TAG_MAKE, exif);
        myAttribute += getTagString(ExifInterface.TAG_MODEL, exif);
        myAttribute += getTagString(ExifInterface.TAG_ORIENTATION, exif);
        myAttribute += getTagString(ExifInterface.TAG_WHITE_BALANCE, exif);
        mView.setText(myAttribute);
    }

    private String getTagString(String tag, ExifInterface exif) {
        return (tag + " : " + exif.getAttribute(tag) + "\n");
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        {
            if (requestCode == REQUEST_CODE && resultCode == RESULT_OK && data != null && data.getData() != null) {
                selectedImageUri = data.getData();
                //imgURL = uri2path(this,selectedImageUri);
                //System.out.println(selectedImageUri);
                //System.out.println(imgURL);
                try {
                    ExifInterface exif = new ExifInterface(Environment.getExternalStorageDirectory().getPath() + "1.png");
                    showExif(exif);
                } catch (IOException e) {
                    e.printStackTrace();
                    System.out.println("exif error");
                }
                imageView.setImageURI(selectedImageUri);
            }
        }
    }